[/ -*- compile-command: "bjam" -*-; auto-fill-mode: t /]

[section:advanced_topics Advanced topics]

[section Virtual and multiple inheritance]


All forms of virtual and multiple inheritance are supported, sometimes
at a performance cost or some extra work on your part.

[h3 Virtual inheritance]

Virtual inheritance is not a problem, however, a call to a
multi-method that involves an argument that is virtually inherited in
the selected specialization will incur the cost of a
`dynamic_cast`. For example:

``
struct X { ... };
struct A : X { ... };
struct B : virtual X { ... };

MULTI_METHOD(foo, void, const virtual_<X&>, const virtual_<X&>);

BEGIN_SPECIALIZATION(foo, void, const X&, const X&)
  // ...
END_SPECIALIZATION;

BEGIN_SPECIALIZATION(foo, void, const A&, const B&)
  // ...
END_SPECIALIZATION;

foo(X(), X()); // 1
foo(A(), B()); // 2
``

Here the first call to `foo()` does not necessitate any casts: both
arguments are `X` objects.

As for the second call, the first argument needs to be converted to a
`A` before calling the specialization. That can be achieved with a
`static_cast`, an operation that has a zero runtime cost. The second
argument, however, requires a cast from virtual base class `X` to
`B` - performed via a costly `dynamic_cast`.

[h3 Multiple `selector` sub-objects]

It may happen that class `selector` is repeatedly inherited, even in
inheritance graphs that don't involve repeated inheritance by
themselves. For example:

``
struct X : selector { ... };
struct Y : selector { ... };
struct XY : X, Y { ... };

MULTI_METHOD(foo, void, const virtual_<X>&);
MULTI_METHOD(bar, void, const virtual_<XY>&);

foo(XY()); // 1
bar(XY()); // 2
``

The first call poses no problem. `foo` takes a `X` object, which
contains a single `selector` sub-object.

The second call is more difficult: `bar` takes a `XY` object that
contains /two/ `selector` sub-object. Truth is, it does not matter
which `selector` it uses: they contain the same
information. Nonetheless, you must tell C++ which `selector` to
use.

This is achieved by using a special form of the `MM_CLASS` macro:

``
struct XY : X, Y {
  MM_CLASS_MULTI(XY, X, Y);

  XY() {
    MM_INIT();
  }
};
``

[h3 Repeated inheritance]

Repeated inheritance is supported but unfortunately requires a
cumbersome operation on the user's part.

Consider:

``
namespace foo {
  struct X : selector { ... };
  struct A : X { ... };
  struct B : X { ... };
  struct AB : A, B { ... };

  MULTI_METHOD(mx, int, const virtual_<X>&);
``

This is a case of multiple `selector` sub-objects, thus the
recommendations from the previous section must be applied. But it does
not suffice. Consider:

``
  // still in namespace foo

  BEGIN_SPECIALIZATION(mx, int, const AB& a) {
    ...
  } END_SPECIALIZATION;
}
``
Before calling the specialization, a cast from `X` to `AB` is
required, and the address of `this` needs to be adjusted. However, the
compiler cannot tell which `X` sub-object the cast is originating
from. Or rather, `static_cast` cannot. The solution is to force a
`dynamic_cast` instead. Sadly, this requires leaving the current
namespace and moving to the `methods` namespace to introduce a
specialization of class template `cast`:


``
  ...
  MULTI_METHOD(mx, int, const virtual_<X>&);
} // leave namespace foo

namespace methods {
  template<>
  struct cast<foo::X, foo::AB> :
    cast_using_dynamic_cast<foo::X, foo::AB> { };
}

namespace foo { // go back to namespace foo

  BEGIN_SPECIALIZATION(mx, int, const AB& a) {
    ...
  } END_SPECIALIZATION;
}

``

If you know of a better solution within C++11, please tell me about
it. Future versions of C++ may feature the detection of a class' bases
at compile-time. The appropriate cast could then be infered
automatically, the same way as the library does in presence of virtual inheritance.

That being said, I don't recall ever needing repeated inheritance
since templates were introduced in C++.

[endsect]

[section No macros please]

It is quite feasible to use the library without using the macros. They
are convenient, but by no means necessary. See the reference, each
macro contains a section showing the code it expands to and its
rationale.

Header `methods/no_macros.hpp` contains only one macro definition,
used for debugging purpose. All the documented macros are defined in
`methods/macros.hpp`.

[endsect]

[section:dynamic_linking Shared objects and dynamic loading]

Class hierarchies and multi-method and their specializations can span
executable and shared objects. Dynamic loading is supported but [*do
not forget to call [link methods.reference.calling.initialize
`initialize()`]] each time that classes or specializations are added
or removed.

The library relies heavily on instances of class templates to store
information describing class hierarchies and multi-methods. In
presence of shared objects, this can cause the same objects to be
instantiated in several application or library objects. Normally this
is not a problem, because the dynamic linker will discard duplicate
instantiations just like the static linker does - or at least it works
that way on my platform (Ubuntu GNU/Linux and g++).

Should you want to avoid this, there is a solution: header
`methods/extern_macros.hpp` replaces selected macros with
versions that do not trigger template instantiation. If you want to
use this mechanism, you should also put a call to `MM_EXTERN_CLASS` at
file scope for each class participating in the fast dispatch scheme
(i.e. containing either a `MM_CLASS` or a `MM_CLASS_MULTI`).

Note that foreign classes do not incur the duplication problem because
they are declared in implementation files.

An example of dynamic loading that uses `extern_macros.hpp` is provided in
the `examples` directory. See [@examples/dl.hpp dl.hpp],
[@examples/dl_main.cpp dl_main.cpp] and [@examples/dl_shared.cpp dl_shared.cpp].

[endsect]

[endsect]